# Default values for templatephpfpm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: xxxxxxxxxx.dkr.ecr.us-east-1.amazonaws.com
  tag: dev
  pullPolicy: IfNotPresent

nginximage:
  repository: xxxxxxxxxx.dkr.ecr.us-east-1.amazonaws.com
  tag: dev
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: "templatephpfpm-app"
fullnameOverride: "templatephpfpm-chart"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "templatephpfpm"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  name: nginx
  type: ClusterIP
  port: 80
  targetPort: 8080

phpfpmService:
  name: phpfpm
  type: ClusterIP
  phpfpmPort: 9000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


config:
  nginx.conf: |-
    server {
      listen 0.0.0.0:8080;
      root /app;
      location / {
        index index.html index.php;
      }
      location ~ \.php$ {
        fastcgi_pass templatephpfpm-chart-phpfpm:9000;
        fastcgi_index index.php;
        include fastcgi.conf;
      }
    }

resources:
  limits:
    cpu: 400m
    memory: 128Mi
  requests:
    cpu: 300m
    memory: 100Mi

# reason: All metrics below target
# Note: It takes default, 5 minutes cooling time to scaledown
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 90

# deploymentStrategy specifies the strategy used to replace old Pods by new ones. Type can be "RollingUpdate" or
# "Recreate". "RollingUpdate" is the default value.
# RollingUpdate: The Deployment updates Pods in a rolling update fashion.
# Recreate: All existing Pods are killed before new ones are created.
deploymentStrategy:
  enabled: true
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 50%
    maxUnavailable: 0

nodeSelector: {}

tolerations: []

affinity: {}
